import tkinter as tk
from forex_python.converter import CurrencyRates
# importing functions from packages


common_currencies = ["USD", "EUR", "GBP", "JPY", "CAD", "CHF", "SGD", "MYR", "AUD"]
# current package does not have functionalities to give us collection of available currencies
# we just define the list of currencies we want to support

class CurrencyConvertor:
    def __init__(self):  # gonna define the graphical user interface in the intit method
        self.root = tk.Tk()  # our basic window
        self.root.title("Currency Convertor")   # title
        self.root.geometry("200x180")  # size of interface

        self.from_var = tk.StringVar(self.root)  # root as a parent ?
        # define str var and option menus, str var are currencies chosen from the list
        # option menu is the dropdown menu connected to that variable
        self.from_var.set("USD")  # set it to be default value of USD
        self.from_menu = tk.OptionMenu(self.root, self.from_var, *common_currencies)
        # unpack common currencies list of values for the dropdown
        self.from_menu.pack(pady=1)

        self.to_var = tk.StringVar(self.root) # copy and paste replaced from to
        self.to_var.set("EUR")  # changed default to euro
        self.to_menu = tk.OptionMenu(self.root, self.from_var, *common_currencies)
        self.to_menu.pack(pady=1)

        self.amount_label = tk.Label(self.root, text="Amount:") # label for the final amount conversion
        self.amount_label.pack(pady=1)  # pack this as well?

        self.amount_entry = tk.Entry(self.root)  # add text box for entry
        self.amount_entry.pack(pady=1)  # padding?

        self.convert_button = tk.Button(self.root, text="Convert", command=self.convert_currency)
        self.convert_button.pack(pady=1)

        self.result_label = tk.Label(self.root, text="")
        self.result_label.pack(pady=1)

        self.root.mainloop()


    def convert_currency(self):
        try:  # do try to avoid problems with invalid numbers and currencies
            from_currency = self.from_var.get()
            to_currency = self.to_var.get()
            amount = float(self.amount_entry.get()) # amount is type cast float

            c_rates = CurrencyRates()

            rate = c_rates.get_rate(from_currency, to_currency)
            converted_amount = amount * rate

            self.result_label.config(text=f"{amount} {from_currency} = {converted_amount: .2f} {to_currency}")
        except ValueError:
            self.result_label.config(text="Please enter a valid number")
        except Exception:
            self.result_label.config(text="Error Occurred")


if __name__ == "__main__":
    CurrencyConvertor()
